fibHelper : (INT, INT)(n : INT)
  = if n == 0
    then (0, 1)
    else let (l, r) <- fibHelper(n - 1) in
         (r, l + r)

fib : INT(n : INT) = let (l, r) <- fibHelper(n) in l

square(n : INT) = n ** 2

ident{A}(a : A) = a

map_ints_to_ints = map{INT, INT}

main(args: [[INT]])
  = let squares <- map_ints_to_ints(square, range(-10, 10)) in
    let _ <- println(l2s{INT}(squares, i2s)) in
    let __ <- println(i2s(fib(10))) in
    let ___ <- println(l2s{[INT]}(args, ident{[INT]})) in
    0
